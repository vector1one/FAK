version: '2'
services:
  velociraptor:
    container_name: velociraptor
    image: wlambert/velociraptor
    #build:
    #  context: ./
    #  dockerfile: Dockerfile
    volumes:
      - ./velociraptor:/velociraptor/:rw
    environment:
      - VELOX_USER=${VELOX_USER}
      - VELOX_PASSWORD=${VELOX_PASSWORD}
      - VELOX_ROLE=${VELOX_ROLE}
      - VELOX_SERVER_URL=${VELOX_SERVER_URL}
      - VELOX_FRONTEND_HOSTNAME=${VELOX_FRONTEND_HOSTNAME}
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8889:8889"
    restart: unless-stopped


services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    restart: always
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - ${IPADDRESS}\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - ${IPADDRESS}\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet-server\n"\
          "    dns:\n"\
          "      - fleet-server\n"\
          "      - localhost\n"\
          "      - ${HOSTNAME}\n"\
          "    ip:\n"\
          "      - ${IPADDRESS}\n"\
          "      - 127.0.0.1\n"\
          "  - name: beat\n"\
          "    dns:\n"\
          "      - beat\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    hostname: es01
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    restart: always
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120 

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    hostname: kibana
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    restart: always
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=certificate
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -k --insecure -I https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


  fleet-server:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    hostname: fleet-server
    container_name: fleet-server
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    labels:
      co.elastic.logs/module: fleet-server
    volumes:
      - certs:/certs
      - fleetserverdata:/usr/share/elastic-agent
    restart: always
    ports:
      - ${FLEET_PORT}:8220
    user: root
    environment:
      - SSL_CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
      - FLEET_CA=/certs/ca/ca.crt
      - FLEET_ENROLL=1
      - FLEET_INSECURE=true
      - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
      - FLEET_SERVER_ELASTICSEARCH_INSECURE=true
      - FLEET_SERVER_ENABLE=1
      - FLEET_SERVER_CERT=/certs/fleet-server/fleet-server.crt
      - FLEET_SERVER_CERT_KEY=/certs/fleet-server/fleet-server.key
      - FLEET_SERVER_INSECURE_HTTP=true
      - FLEET_SERVER_POLICY_ID=fleet-server-policy
      - FLEET_URL=https://fleet-server:8220
      - KIBANA_FLEET_CA=/certs/ca/ca.crt
      - KIBANA_FLEET_SETUP=1
      - KIBANA_FLEET_USERNAME=elastic
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_HOST=https://kibana:5601


      volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  fleetserverdata:
    driver: local

networks:
  default:
    name: HOL
    external: false


portainer-agent:
    image: portainer/agent:2.21.4
    container_name: portainer_agent
    restart: always
    ports:
      - "9001:9001"  # Expose the agent API on port 9001
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock       # Allow Docker socket access
      - /var/lib/docker/volumes:/var/lib/docker/volumes # Mount Docker volumes directory
      - /:/host                                          # Mount the root filesystem to /host
    networks:
      - HOL

networks:
  HIL:
    driver: bridge


  timesketch-web:
    container_name: timesketch-web
    image: us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:${TIMESKETCH_VERSION}
    environment:
      - NUM_WSGI_WORKERS=${NUM_WSGI_WORKERS}
    restart: always
    command: timesketch-web
    volumes:
      - ${TIMESKETCH_CONFIG_PATH}:/etc/timesketch/
      - ${TIMESKETCH_UPLOAD_PATH}:/usr/share/timesketch/upload/
      - ${TIMESKETCH_LOGS_PATH}:/var/log/timesketch/

  # Temporary service while the V2 UI is in the testing phase.
  # TODO: Remove when V2 is the default.
  timesketch-web-legacy:
    container_name: timesketch-web-legacy
    image: us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:${TIMESKETCH_VERSION}
    environment:
      - NUM_WSGI_WORKERS=${NUM_WSGI_WORKERS}
    restart: always
    command: timesketch-web-legacy
    volumes:
      - ./etc/timesketch:/etc/timesketch/
      - ./upload:/usr/share/timesketch/upload/
      - ./logs:/var/log/timesketch/

  timesketch-worker:
    container_name: timesketch-worker
    image: us-docker.pkg.dev/osdfir-registry/timesketch/timesketch:${TIMESKETCH_VERSION}
    environment:
      - WORKER_LOG_LEVEL=${WORKER_LOG_LEVEL}
    restart: always
    command: timesketch-worker
    volumes:
      - ${TIMESKETCH_CONFIG_PATH}:/etc/timesketch/
      - ${TIMESKETCH_UPLOAD_PATH}:/usr/share/timesketch/upload/
      - ${TIMESKETCH_LOGS_PATH}:/var/log/timesketch/

  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    restart: always
    environment:
      - TAKE_FILE_OWNERSHIP=1
      - discovery.type=single-node
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true" # TODO: Enable when we have migrated the python client to Opensearch as well.
      - "OPENSEARCH_JAVA_OPTS=-Xms${OPENSEARCH_MEM_USE_GB}g -Xmx${OPENSEARCH_MEM_USE_GB}g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ${OPENSEARCH_DATA_PATH}:/usr/share/opensearch/data/

  postgres:
    container_name: postgres
    image: postgres:${POSTGRES_VERSION}
    environment:
      - POSTGRES_USER=timesketch
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: always
    volumes:
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:${REDIS_VERSION}
    command: "redis-server"
    restart: always

  nginx:
    container_name: nginx
    image: nginx:${NGINX_VERSION}
    restart: always
    ports:
      - ${NGINX_HTTP_PORT}:80
      - ${NGINX_HTTPS_PORT}:443
    volumes:
      - ${NGINX_CONFIG_PATH}:/etc/nginx/nginx.conf

